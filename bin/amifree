#!/usr/bin/env node
const fs = require('fs');
const readline = require('readline');
const { google } = require('googleapis');
const path = require('path');

require('dotenv').config()

const SCOPES = ['https://www.googleapis.com/auth/calendar.readonly'];
const TOKEN_PATH = 'token.json';

// Eventually take command line arguments to set today, tomorrow, thursday, etc.
let today = new Date();
let endOfToday = new Date();
endOfToday.setHours(23,59,59,999);

fs.readFile(path.resolve(__dirname, '../credentials.json'), (err, credentials) => {
  if (err) return console.log("Error loading client secret file:", err);
  authorize(JSON.parse(credentials), listEvents);
});

function authorize(credentials, callback) {
  const { client_secret, client_id, redirect_uris } = credentials.installed;
  const oAuth2Client = new google.auth.OAuth2(
    client_id, client_secret, redirect_uris[0]);

  fs.readFile(TOKEN_PATH, (err, token) => {
    if (err) return getAccessToken(oAuth2Client, callback);
    oAuth2Client.setCredentials(JSON.parse(token));
    callback(oAuth2Client);
  });
}

function getAccessToken(oAuth2Client, callback) {
  const authUrl = oAuth2Client.generateAuthUrl({
    access_type: 'offline',
    scope: SCOPES
  });

  process.stdout.write(`
                 _  __              ___  
                (_)/ _|            |__ \\ 
  __ _ _ __ ___  _| |_ _ __ ___  ___  ) |
 / _\` | '_ \` _ \\| |  _| '__/ _ \\/ _ \\/ / 
| (_| | | | | | | | | | | |  __/  __/_|  
 \\__,_|_| |_| |_|_|_| |_|  \\___|\\___(_)                                
  `)
  console.log(`\n\x1b[1mTo authorize this application, visit the URL below:\x1b[0m`)
  console.log(`\x1b[34;4m${authUrl}\x1b[0m`);

  const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout,
  });

  rl.question('\n\x1b[1mEnter the code from that page here: \x1b[0m', (code) => {
    rl.close();

    oAuth2Client.getToken(code, (err, token) => {
      if (err) return console.error('Error retrieving access token', err);
      oAuth2Client.setCredentials(token);

      fs.writeFile(TOKEN_PATH, JSON.stringify(token), (err) => {
        if (err) console.error(err);
        console.log('Token stored to:', TOKEN_PATH);
      });

      callback(oAuth2Client);
    })
  })
}

function listEvents(auth) {
  const calendar = google.calendar({version: 'v3', auth});
  calendar.freebusy.query({
    auth: auth,
    headers: { "content-type" : "application/json" },
    resource: {
      items: [
        { "id" : process.env.CALENDAR_ID }
      ],
      timeMin: today,
      timeMax: endOfToday
    }
  }, (err, res) => {
    if (err) return console.log('The API returned an error: ' + err);
    if (res) {
      let timeSlots = res.data.calendars[process.env.CALENDAR_ID].busy

      for (let i = 0; i < timeSlots.length; i++) {
        let start = new Date(timeSlots[i].start).toLocaleString('en-US', { hour12: true })
        let end = new Date(timeSlots[i].end).toLocaleString('en-US', { hour12: true })

        if (i == 0) process.stdout.write(`\n\x1b[36;1mI am free\nfrom\x1b[0m 7:30:00 AM PST`)
        process.stdout.write(`\x1b[36;1m to\x1b[0m${start.slice(11)} PST\n`);
        // process.stdout.write("")
        process.stdout.write(`\x1b[36;1mfrom\x1b[0m${end.slice(11)} PST`);
        if (i == timeSlots.length - 1) process.stdout.write(`\x1b[36;1m to\x1b[0m 5:00:00 PM PST\n\n\n`)
      };
    } else {
      console.log('No upcoming events found.');
    }
  });
}