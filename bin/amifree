#!/usr/bin/env node
const fs = require('fs');
const readline = require('readline');
const { google } = require('googleapis');

require('dotenv').config()

const SCOPES = ['https://www.googleapis.com/auth/calendar.readonly'];
const TOKEN_PATH = 'token.json';

fs.readFile('credentials.json', (err, content) => {
  if (err) return console.log("Error loading client secret file:", err);
  authorize(JSON.parse(content), listEvents);
})

function authorize(credentials, callback) {
  const { client_secret, client_id, redirect_uris } = credentials.installed;
  const oAuth2Client = new google.auth.OAuth2(
    client_id, client_secret, redirect_uris[0]);

  fs.readFile(TOKEN_PATH, (err, token) => {
    if (err) return getAccessToken(oAuth2Client, callback);
    oAuth2Client.setCredentials(JSON.parse(token));
    callback(oAuth2Client);
  });
}

function getAccessToken(oAuth2Client, callback) {
  const authUrl = oAuth2Client.generateAuthUrl({
    access_type: 'offline',
    scope: SCOPES
  });

  console.log('Authorize this app by visiting the URL:', authUrl);

  const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout,
  });

  rl.question('Enter the code from that page here: ', (code) => {
    rl.close();

    oAuth2Client.getToken(code, (err, token) => {
      if (err) return console.error('Error retrieving access token', err);
      oAuth2Client.setCredentials(token);

      fs.writeFile(TOKEN_PATH, JSON.stringify(token), (err) => {
        if (err) console.error(err);
        console.log('Token stored to:', TOKEN_PATH);
      });

      callback(oAuth2Client);
    })
  })
}

function listEvents(auth) {
  const calendar = google.calendar({version: 'v3', auth});
  calendar.freebusy.query({
    auth: auth,
    headers: { "content-type" : "application/json" },
    resource: {
      items: [
        { "id" : process.env.CALENDAR_ID }
      ],
      timeMin: (new Date()).toISOString(),
      timeMax: (new Date(2018,11,13)).toISOString()
    }
  }, (err, res) => {
    if (err) return console.log('The API returned an error: ' + err);
    if (res) {
      let timeSlots = res.data.calendars['matt@commerceacceleration.com'].busy

      for (let i = 0; i < timeSlots.length; i++) {
        let start = new Date(timeSlots[i].start).toLocaleString()
        let end = new Date(timeSlots[i].end).toLocaleString()

        console.log("Start  ", start);
        console.log("End    ", end);
        console.log("\n")
      };
    } else {
      console.log('No upcoming events found.');
    }
  });
}